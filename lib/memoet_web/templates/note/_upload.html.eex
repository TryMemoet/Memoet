<div class="flex items-center justify-center space-x-2" x-data="imageViewer('<%= @image %>')">
  <%= text_input @f, :image, class: "form-control form-block", value: @image, "x-model": "imageUrl" %>
  <div class="relative">
    <label class="cursor-pointer">
      <!-- Show the image -->
      <template x-if="imageUrl">
        <img :src="imageUrl"
             class="object-cover w-16 h-10 border border-gray-300 rounded-md"
        >
      </template>
      <template x-if="!imageUrl">
        <div class="flex items-center justify-center w-16 h-10 border border-gray-300 rounded-md">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg>
        </div>
      </template>
      <template x-if="imageUploading">
        <div
          class="absolute inset-0 flex items-center justify-center bg-gray-400 rounded-md"
        >
          <svg class="w-5 h-5" viewBox="0 0 38 38" xmlns="http://www.w3.org/2000/svg" stroke="#fff"><g fill="none" fill-rule="evenodd"><g transform="translate(1 1)" stroke-width="2"><circle stroke-opacity=".5" cx="18" cy="18" r="18"/><path d="M36 18c0-9.94-8.06-18-18-18"> <animateTransform attributeName="transform" type="rotate" from="0 18 18" to="360 18 18" dur="1s" repeatCount="indefinite"/></path></g></g></svg>
        </div>
      </template>
      <input class="sr-only" type="file" accept="image/*" @change="fileChosen">
    </label>
  </div>
</div>

<script>
function imageViewer(src) {
  return {
    imageUrl: src || '',
    imageUploading: false,
    imageData: null,

    fileChosen(event) {
      if (!event.target.files.length) return;
      const file = event.target.files[0];

      const reader = new FileReader();
      reader.readAsBinaryString(file);
      reader.onload = e => this.uploadFile(file, e.target.result);
    },

    uploadFile(file, binary) {
      this.imageUploading = true;
      this.sendData(file, binary, (error, event) => {
        console.log(error, event)
        this.imageUrl = imageUrl;
        this.imageUploading = false;
      })
    },

    sendData(file, binary, callback) {
      const XHR = new XMLHttpRequest();
      const boundary = "blob";

      let data = "";

      data += "--" + boundary + "\r\n";
      data += 'content-disposition: form-data; '
            + 'name="'         + file.name          + '"; '
            + 'filename="'     + file.name + '"\r\n';
      data += 'Content-Type: ' + file.type + '\r\n';
      data += '\r\n';
      data += binary + '\r\n';
      data += "--" + boundary + "\r\n";

      data += 'content-disposition: form-data; name="' + file.name + '"\r\n';
      data += "--" + boundary + "--";

      // Success handler
      XHR.addEventListener('load', function(event) {
        callback(null, event);
      });

      // Error handler
      XHR.addEventListener('error', function(event) {
        callback(true, event);
      });

      // Set up our request
      XHR.open('POST', '/user/file' );

      // Add the required HTTP header to handle a multipart form data POST request
      XHR.setRequestHeader('Content-Type','multipart/form-data; boundary=' + boundary);

      // And finally, send our data.
      XHR.send(data);
    }
  }
}
</script>
